{"version":3,"sources":["client.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","baseURL","timeout","API","getDomains","a","get","getAvailability","name","domain","Context","createContext","lastSearch","statuses","SearchRegex","RegExp","DomainGroup","header","domains","Divider","horizontal","Header","as","map","d","DomainLabel","useContext","text","useMemo","color","status","find","x","available","Label","style","margin","App","useState","setDomains","search","setSearch","setLastSearch","setStatuses","error","setError","useEffect","then","response","data","sort","y","catch","console","log","onSubmit","prev","JSON","stringify","Provider","value","Container","paddingTop","paddingBottom","Message","Form","Field","onChange","event","term","target","test","textAlign","filter","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAGMA,E,OAAWC,EAAMC,OAAO,CAC5BC,QAAS,0DACTC,QAAS,MAYIC,EATH,CACVC,WAAW,WAAD,4BAAE,sBAAAC,EAAA,sEACGP,EAASQ,IAAc,YAD1B,mFAAF,kDAAC,GAGXC,gBAAgB,WAAD,4BAAE,WAAOC,EAAcC,GAArB,SAAAJ,EAAA,sEACFP,EAASQ,IAAT,+BAAmDE,EAAnD,YAA2DC,EAAOD,OADhE,mFAAF,qDAAC,I,QCNZE,EAAUC,wBAA0B,CAAEC,WAAY,GAAIC,SAAU,KAChEC,EAAc,IAAIC,OAAO,kBAwEzBC,EAAc,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,OAAQC,EAAqD,EAArDA,QAC7B,OACE,gCACE,cAACC,EAAA,EAAD,CAASC,YAAU,EAAnB,SACE,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAX,SACGL,MAHP,OAOGC,QAPH,IAOGA,OAPH,EAOGA,EAASK,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAA0BhB,KAAMgB,EAAEhB,MAAhBgB,EAAEhB,aAKzCiB,EAAc,SAAC,GAAgC,IAA9BjB,EAA6B,EAA7BA,KACrB,EAAiCkB,qBAAuBhB,GAAhDG,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,WAEZe,EAAOC,mBAAQ,2BAAShB,EAAT,YAAuBJ,KAAQ,CAACI,EAAYJ,IAE3DqB,EAAQD,mBAAQ,WACpB,IAAME,EAASjB,EAASkB,MAAK,SAAAC,GAAC,OAAIA,EAAEvB,SAAWkB,KAC/C,OAAKG,EACEA,EAAOG,UAAY,QAAU,MADhB,SAEnB,CAACpB,EAAUc,IAEd,OACE,cAACO,EAAA,EAAD,CAAOC,MAAO,CAAEC,OAAQ,OAASP,MAAOA,EAAxC,SACGF,KAKQU,EAtGH,WACV,MAA8BC,mBAAmB,IAAjD,mBAAOpB,EAAP,KAAgBqB,EAAhB,KACA,EAA4BD,mBAAiB,IAA7C,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAAoCH,mBAAiB,IAArD,mBAAO1B,EAAP,KAAmB8B,EAAnB,KACA,EAAgCJ,mBAAyB,IAAzD,mBAAOzB,EAAP,KAAiB8B,EAAjB,KACA,EAA0BL,mBAAiB,IAA3C,mBAAOM,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACR3C,EAAIC,aACD2C,MAAK,SAACC,GAAD,OAAcT,EAAWS,EAASC,KAAKC,MAAK,SAAClB,EAAGmB,GAAJ,OAAUnB,EAAExB,KAAO2C,EAAE3C,KAAO,GAAK,SAClF4C,OAAM,SAACR,GAAD,OAAWS,QAAQC,IAAIV,QAC/B,IAEH,IAAMW,EAAQ,uCAAG,kCAAAlD,EAAA,sDACfqC,EAAcF,GACdG,EAAY,IACZE,EAAS,IAHM,cAKM3B,GALN,0BAKJT,EALI,QAMb,GAAImC,EAAO,MAAM,CAAN,UAEX,sBAAC,4BAAAvC,EAAA,+EAE0BF,EAAII,gBAAgBiC,EAAQ/B,GAFtD,OAESuC,EAFT,OAGGL,GAAY,SAAAa,GAAI,4BAAQA,GAAR,CAAcR,EAASC,UAH1C,uDAKGJ,EAASY,KAAKC,UAAL,OALZ,2EAAD,IARa,kUAAH,qDAoBd,OACE,cAAChD,EAAQiD,SAAT,CAAkBC,MAAO,CAAEhD,aAAYC,YAAvC,SACE,eAACgD,EAAA,EAAD,CAAW1B,MAAO,CAAE2B,WAAY,OAAQC,cAAe,QAAvD,UACGnB,GACC,cAACoB,EAAA,EAAD,CAASnC,MAAM,MAAf,SACGe,IAIL,cAACqB,EAAA,EAAD,CAAMV,SAAUA,EAAhB,SACE,eAACU,EAAA,EAAKC,MAAN,WACE,2CACA,uBAAON,MAAOpB,EAAQ2B,SAAU,SAACC,GAC/B,IAAMC,EAAOD,EAAME,OAAOV,MACtB9C,EAAYyD,KAAKF,IACnB5B,EAAU4B,WAMlB,sBAAKlC,MAAO,CAAEqC,UAAW,UAAzB,UACE,cAAC,EAAD,CACEvD,OAAQ,UACRC,QAASA,EAAQuD,QAAO,SAAAzC,GAAC,MAAe,YAAXA,EAAE0C,UAGjC,cAAC,EAAD,CACEzD,OAAQ,kBACRC,QAASA,EAAQuD,QAAO,SAAAzC,GAAC,MAAe,iBAAXA,EAAE0C,mBCzD5BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6a25dbe7.chunk.js","sourcesContent":["import axios from 'axios'\nimport { Domain, DomainStatus } from './types';\n\nconst instance = axios.create({\n  baseURL: 'https://1ztlll6rcl.execute-api.eu-north-1.amazonaws.com',\n  timeout: 3000,\n});\n\nconst API = {\n  getDomains: async () => {\n    return await instance.get<Domain[]>(\"/domains\")\n  },\n  getAvailability: async (name: string, domain: Domain) => {\n    return await instance.get<DomainStatus>(`/availability?domain=${name}.${domain.name}`)\n  }\n}\n\nexport default API","import { createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container, Divider, Form, Header, Label, Message } from 'semantic-ui-react';\nimport API from './client';\nimport { AppContext, Domain, DomainStatus } from './types';\n\nconst Context = createContext<AppContext>({ lastSearch: '', statuses: [] })\nconst SearchRegex = new RegExp(/^[a-zA-Z0-9]*$/)\n\nconst App = () => {\n  const [domains, setDomains] = useState<Domain[]>([])\n  const [search, setSearch] = useState<string>('')\n  const [lastSearch, setLastSearch] = useState<string>('')\n  const [statuses, setStatuses] = useState<DomainStatus[]>([])\n  const [error, setError] = useState<string>('')\n\n  useEffect(() => {\n    API.getDomains()\n      .then((response) => setDomains(response.data.sort((x, y) => x.name > y.name ? 1 : -1)))\n      .catch((error) => console.log(error))\n  }, [])\n\n  const onSubmit = async () => {\n    setLastSearch(search)\n    setStatuses([])\n    setError('')\n\n    for (const domain of domains) {\n      if (error) return\n\n      (async () => {\n        try {\n          const response = await API.getAvailability(search, domain)\n          setStatuses(prev => [...prev, response.data])\n        } catch (e) {\n          setError(JSON.stringify(e))\n          return\n        }\n      })()\n    }\n  }\n\n  return (\n    <Context.Provider value={{ lastSearch, statuses } as AppContext}>\n      <Container style={{ paddingTop: '50px', paddingBottom: '50px' }}>\n        {error && (\n          <Message color='red'>\n            {error}\n          </Message>\n        )}\n\n        <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <label>Search</label>\n            <input value={search} onChange={(event) => {\n              const term = event.target.value\n              if (SearchRegex.test(term)) {\n                setSearch(term)\n              }\n            }} />\n          </Form.Field>\n        </Form>\n\n        <div style={{ textAlign: 'center' }}>\n          <DomainGroup\n            header={'General'}\n            domains={domains.filter(x => x.type === 'GENERIC')}\n          />\n\n          <DomainGroup\n            header={'Country Domains'}\n            domains={domains.filter(x => x.type === 'COUNTRY_CODE')}\n          />\n        </div>\n      </Container>\n    </Context.Provider>\n  );\n}\n\nconst DomainGroup = ({ header, domains }: { header: string, domains: Domain[] }) => {\n  return (\n    <div>\n      <Divider horizontal>\n        <Header as='h4'>\n          {header}\n        </Header>\n      </Divider>\n\n      {domains?.map((d) => <DomainLabel key={d.name} name={d.name} />)}\n    </div>\n  )\n}\n\nconst DomainLabel = ({ name }: { name: string }) => {\n  const { statuses, lastSearch } = useContext<AppContext>(Context)\n\n  const text = useMemo(() => `${lastSearch}.${name}`, [lastSearch, name])\n\n  const color = useMemo(() => {\n    const status = statuses.find(x => x.domain === text)\n    if (!status) return 'grey'\n    return status.available ? 'green' : 'red'\n  }, [statuses, text])\n\n  return (\n    <Label style={{ margin: '2px' }} color={color}>\n      {text}\n    </Label>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}