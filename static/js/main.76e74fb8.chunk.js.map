{"version":3,"sources":["client.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","baseURL","timeout","API","getDomains","a","get","getAvailability","name","tld","Context","createContext","lookup","statuses","SearchRegex","RegExp","DomainGroup","header","domains","Divider","horizontal","Header","as","map","d","DomainLabel","useContext","text","useMemo","color","status","find","x","domain","available","Label","style","margin","App","useState","setDomains","input","setInput","setLookup","setStatuses","error","setError","loading","setLoading","cancel","useRef","useEffect","then","response","data","sort","y","catch","e","console","log","finally","current","undefined","onSubmit","term","test","Promise","resolve","fetchDomainStatus","setTimeout","prev","JSON","stringify","Dimmer","active","inverted","Loader","Provider","value","Container","paddingTop","paddingBottom","float","href","target","rel","Message","Form","Field","Input","action","content","icon","disabled","placeholder","onChange","event","toLowerCase","textAlign","filter","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76e74fb8.chunk.js","sourcesContent":["import axios from 'axios'\nimport { Domain, DomainStatus } from './types';\n\nconst instance = axios.create({\n  baseURL: 'https://1ztlll6rcl.execute-api.eu-north-1.amazonaws.com',\n  timeout: 3000,\n});\n\nconst API = {\n  getDomains: async () => {\n    return instance.get<Domain[]>(\"/domains\")\n  },\n  getAvailability: async (name: string, tld: Domain) => {\n    return instance.get<DomainStatus>(`/availability?domain=${name}.${tld.name}`)\n  }\n}\n\nexport default API","import 'semantic-ui-css/semantic.min.css'\nimport { createContext, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { Container, Dimmer, Divider, Form, Header, Input, Label, Loader, Message } from 'semantic-ui-react';\nimport { AppContext, Domain, DomainStatus } from './types';\nimport API from './client';\n\nconst Context = createContext<AppContext>({ lookup: '', statuses: [] })\nconst SearchRegex = new RegExp(/^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]$/)\n\nconst App = () => {\n  const [domains, setDomains] = useState<Domain[]>([])\n  const [input, setInput] = useState<string>('')\n  const [lookup, setLookup] = useState<string>('')\n  const [statuses, setStatuses] = useState<DomainStatus[]>([])\n  const [error, setError] = useState<string>('')\n  const [loading, setLoading] = useState<boolean>(true)\n  const cancel = useRef<(() => void) | undefined>()\n\n  useEffect(() => {\n    setLoading(true)\n    API.getDomains()\n      .then((response) => {\n        response.data.sort((x, y) => x.name > y.name ? 1 : -1)\n        setDomains(response.data)\n      })\n      .catch((e) => console.log(e))\n      .finally(() => setLoading(false))\n  }, [])\n\n  useEffect(() => {\n    if (!!cancel.current) {\n      setLookup('')\n      cancel.current()\n      cancel.current = undefined\n    }\n  }, [input])\n\n  const onSubmit = async (term: string) => {\n    if (!term || !domains || loading || !SearchRegex.test(input)) return\n    setLookup(term)\n    setStatuses([])\n    setError('')\n\n    await new Promise<void>(async (resolve) => {\n      cancel.current = () => resolve()\n      for (const domain of domains) {\n        if (error || !cancel.current) break\n        fetchDomainStatus(term, domain)\n        // Wait 1s to avoid rate limits on free API.\n        await new Promise(timeout => setTimeout(timeout, 1000));\n      }\n    })\n  }\n\n  const fetchDomainStatus = async (name: string, tld: Domain) => {\n    try {\n      const response = await API.getAvailability(name, tld)\n      setStatuses(prev => [...prev, response.data])\n    } catch (e) {\n      setError(JSON.stringify(e))\n      return\n    }\n  }\n\n  if (loading) {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted>Loading</Loader>\n      </Dimmer>\n    )\n  }\n\n  return (\n    <Context.Provider value={{ lookup: lookup, statuses } as AppContext}>\n      <Container style={{ paddingTop: '50px', paddingBottom: '50px' }}>\n        <div>\n          <small style={{ float: 'left' }}>\n            Made by <a href=\"http://www.viskov.ee\" target=\"_blank\" rel=\"noreferrer\">Joel Viskov</a>\n          </small>\n          <small style={{ float: 'right' }}>\n            <a href=\"https://github.com/joelviskov/domain-lookup\" target=\"_blank\" rel=\"noreferrer\">Source code</a>\n          </small>\n        </div>\n        <br />\n        <hr />\n        <p>This is just a demo application for testing out AWS Lambdas. API is limited to 60 requests per minute, so you might hit rate limit. Because of that, I set up 1 sec sleep between queries.</p>\n\n        {error && (\n          <Message color='red'>\n            {error}\n          </Message>\n        )}\n\n        <Form onSubmit={() => onSubmit(input)}>\n          <Form.Field>\n            <label>Domain Name Search</label>\n            <Input\n              loading={!!cancel.current}\n              action={{ color: 'blue', content: 'Search', icon: 'search', disabled: !SearchRegex.test(input) }}\n              value={input}\n              placeholder={'google'}\n              onChange={(event) => {\n                const term = event.target.value\n                setInput(term.toLowerCase())\n              }}\n            />\n          </Form.Field>\n        </Form>\n\n        <div style={{ textAlign: 'center' }}>\n          <DomainGroup\n            header={'Country Domains'}\n            domains={domains.filter(x => x.type === 'COUNTRY_CODE')}\n          />\n\n          <DomainGroup\n            header={'General Domains'}\n            domains={domains.filter(x => x.type === 'GENERIC')}\n          />\n        </div>\n      </Container>\n    </Context.Provider>\n  );\n}\n\nconst DomainGroup = ({ header, domains }: { header: string, domains: Domain[] }) => {\n  return (\n    <div>\n      <Divider horizontal>\n        <Header as='h4'>\n          {header}\n        </Header>\n      </Divider>\n\n      {domains?.map((d) => <DomainLabel key={d.name} name={d.name} />)}\n    </div>\n  )\n}\n\nconst DomainLabel = ({ name }: { name: string }) => {\n  const { statuses, lookup } = useContext<AppContext>(Context)\n\n  const text = useMemo(() => `${lookup}.${name}`, [lookup, name])\n\n  const color = useMemo(() => {\n    const status = statuses.find(x => x.domain === text)\n    if (!status) return 'grey'\n    return status.available ? 'green' : 'red'\n  }, [statuses, text])\n\n  return (\n    <Label style={{ margin: '2px' }} color={color}>\n      {text}\n    </Label>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}